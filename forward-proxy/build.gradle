defaultTasks 'clean', 'sh', 'bat'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName='org.uli.ForwardProxyServer'; // for 'gradle run' and MANIFEST.MF

// Some notes about the jetty versions:
// - for jetty 8, the ProxyServlet is in the artifact jetty-servlets
// - for jetty 9, the ProxyServlet is in the artifact jetty-proxy
def jettyVersion='9.0+';

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    //compile "org.eclipse.jetty:jetty-servlets:${jettyVersion}" // jetty8
    compile "org.eclipse.jetty:jetty-proxy:${jettyVersion}"      // jetty9

    //providedCompile 'javax.servlet:javax.servlet-api:3.0.+'
    testCompile 'junit:junit:4.11'
}

repositories {
    mavenCentral()
}

// build a fat jar (http://docs.codehaus.org/display/GRADLE/Cookbook#Cookbook-Creatingafatjar)
// the jar will be named build/libs/forward-proxy-servlet.jar
jar {
    from {
      configurations.compile.collect {
         it.isDirectory() ? it : zipTree(it).matching{
            exclude "META-INF/**"
         }
      }
    }
    manifest {
        attributes("Main-Class": mainClassName)
    }
}

clean {
    delete "${project.name}.sh"
    delete "${project.name}.bat"
    delete 'bin'
}

task sh {
  dependsOn 'jar';
  String distShName = '../scripts/dist.sh';
  String jarName    = "build/libs/${project.name}.jar";
  String shName     = "${project.name}.sh"
  inputs.file distShName;
  inputs.file jarName;
  outputs.file shName;
  ant.concat(destfile: shName, binary: true) {
    fileset(file: distShName)
    fileset(file: jarName, erroronmissingdir: false)
  }
  ant.chmod(file: shName, perm: 'a+x')
}

task bat {
  dependsOn 'jar';
  String distBatName = '../scripts/dist.bat';
  String jarName    = "build/libs/${project.name}.jar";
  String batName     = "${project.name}.bat"
  inputs.file distBatName;
  inputs.file jarName;
  outputs.file batName;
  ant.concat(destfile: batName, binary: true) {
    fileset(file: distBatName)
    fileset(file: jarName, erroronmissingdir: false)
  }
}
