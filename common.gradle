task(sh) {
  String distShName = distSh;
  String jarName    = "${project.projectDir}/build/libs/${project.name}-${version}.jar";
  String shName     = "${project.name}-${version}.sh"
  dependsOn jar;
  inputs.file distShName;
  inputs.file jarName;
  outputs.file shName;
  doLast {
    ant.concat(destfile: shName, binary: true) {
      fileset(file: distShName)
      fileset(file: jarName, erroronmissingdir: false)
    }
    ant.chmod(file: shName, perm: 'a+x')
  }
}

task(bat) {
  String distBatName = distBat
  String jarName     = "${project.projectDir}/build/libs/${project.name}-${version}.jar";
  String batName     = "${project.name}-${version}.bat"
  dependsOn jar;
  inputs.file distBatName;
  inputs.file jarName;
  outputs.file batName;
  doLast {
    ant.concat(destfile: batName, binary: true) {
      fileset(file: distBatName)
      fileset(file: jarName, erroronmissingdir: false)
    }
  }
}

task copyToOutputLibs(type: Copy) {
    into "${project.buildDir}/output/libs"
    from configurations.runtime
}

task(groovyJar, dependsOn: copyToOutputLibs) {
  doLast {
    def files = [];
    new File("${project.buildDir}/output/libs").eachFile { files.add(it.getAbsolutePath()) };
    String classpath = files.join(File.pathSeparator);
    ant.java(classpath: classpath, classname: 'org.codehaus.groovy.tools.FileSystemCompiler') {
      arg(value: '-d')
      arg(value: "${project.buildDir}/classes/main")
      arg(value: project.groovyScriptName)
    }
  }
}

/*
task(jarsToLib) {
  doLast {
    from {
      configurations.runtime.collect {
         it.isDirectory() ? it : zipTree(it).matching {
            exclude { detail ->
               detail.getFile().getParentFile().getName().equals("META-INF") && !detail.getFile().getName().equals("dgminfo")
            }
         }
      }
    }
  }
}
*/
